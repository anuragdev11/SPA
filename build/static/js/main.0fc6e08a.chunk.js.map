{"version":3,"sources":["GoogleAnalytics.js","App.js","serviceWorker.js","index.js"],"names":["designation","vertical","department","funcarea","employeeId","report","reportN","PageView","name","ReactGA","pageview","initGA","empid","AK","reportID","fetch","then","res","json","result","status","data","employeeDetails","DESIGNATIONNAME","VERTICALNAME","IIL_DEPT_NAME","FUNCTIONALAREANAME","Event","value","category","set","dimension1","dimension2","dimension3","dimension4","dimension5","event","action","label","initialize","Report","App","props","state","Display","isLoading","glid","getUrlVars","vars","window","atob","params","replace","m","key","location","href","getUrlVarsBase64","empID","r","React","lazy","this","setState","className","style","height","fallback","employeeid","employeename","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0fc6e08a.chunk.js","sourcesContent":["import ReactGA from \"react-ga\";\r\n\r\nlet designation = \"\";\r\nlet vertical = \"\";\r\nlet department = \"\";\r\nlet funcarea = \"\";\r\nlet employeeId = \"\";\r\nlet report = [\"Segmentation,NSD,Welcome\",\"OS\"];\r\nlet reportN = \"\";\r\n\r\nexport const PageView = (name) => {\r\n    ReactGA.pageview(\"React/\"+name);\r\n};\r\n\r\nexport function initGA(empid,AK,reportID){\r\n    fetch(\"https://merp.intermesh.net/index.php/Userlisting/Employeedetails?empid=\"+empid+\"&AK=\"+AK).then(res => res.json()).then((result)=>{\r\n        if(result.status === \"200\") {\r\n            designation = result.data.employeeDetails[0].DESIGNATIONNAME\r\n            vertical = result.data.employeeDetails[0].VERTICALNAME\r\n            department = result.data.employeeDetails[0].IIL_DEPT_NAME\r\n            funcarea = result.data.employeeDetails[0].FUNCTIONALAREANAME\r\n            employeeId = empid;\r\n            reportN = report[reportID-1]\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport const Event = (name, value=1) => {\r\n    let category = vertical + '_' + department + '_' + funcarea + '_' + designation;\r\n    ReactGA.set({ dimension1: employeeId });//Employee\r\n    ReactGA.set({ dimension2: vertical });//Vertical\r\n    ReactGA.set({ dimension3: department });//Department\r\n    ReactGA.set({ dimension4: funcarea });//FunctionalArea\r\n    ReactGA.set({ dimension5: designation });//Designation\r\n    ReactGA.event({\r\n        category: category,\r\n        action: \"ReportSPA_Click\",\r\n        label: \"ReportSPA_\"+reportN+\"_\"+name,\r\n        value: value\r\n    });\r\n};\r\n","import React, { Component,Suspense, lazy } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport {PageView, initGA}  from './GoogleAnalytics';\r\nimport { init as initApm } from '@elastic/apm-rum'\r\nimport ReactGA from 'react-ga';\r\nReactGA.initialize('UA-28761981-1');\r\nlet Report = \"\";\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      Display: \"block\",\r\n      data: {},\r\n      isLoading: true,\r\n      empid: \"\",\r\n      AK: \"\",\r\n      name: \"\",\r\n      report: \"\",\r\n      glid: \"\"\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n     // const apm = initApm({\r\n    //\r\n    //   // Set required service name (allowed characters: a-z, A-Z, 0-9, -, _, and space)\r\n    //   serviceName: 'WEBERP_REACT',\r\n    //\r\n    //   // Set custom APM Server URL (default: http://localhost:8200)\r\n    //   serverUrl: 'https://dev-kibana.intermesh.net:8200', //206.191.151.208\r\n    //\r\n    //   pageLoadTransactionName: \"ReportsSPA\"\r\n    //\r\n    // });\r\n\r\n\r\n    function getUrlVars() {\r\n      var vars = {};\r\n      var parts = window.atob(params).replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {\r\n        vars[key] = value;\r\n      });\r\n      return vars;\r\n    }\r\n\r\n    function getUrlVarsBase64() {\r\n      var vars = {};\r\n      var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {\r\n        vars[key] = value;\r\n      });\r\n      return vars;\r\n    }\r\n    let params = getUrlVarsBase64()[\"R\"];\r\n    const empID = getUrlVars()[\"empid\"].replace(\"%20\", \" \");\r\n    const AK = getUrlVars()[\"AK\"];\r\n    const name = getUrlVars()[\"empname\"].replace(\"%20\", \" \");\r\n    const r = getUrlVars()[\"reportid\"];\r\n    let glid = \"\"\r\n    if (r === \"6\"){\r\n      glid = getUrlVars()[\"glid\"];\r\n    }\r\n    if (r === \"1\"){\r\n      Report = React.lazy(() => import('./components/segmentationController/SegmentationReport'));\r\n    }\r\n    if(r === \"2\"){\r\n      Report = React.lazy(() => import('./components/nsdController/NSDReport'));\r\n    }\r\n    if(r === \"3\"){\r\n      Report = React.lazy(() => import('./components/welcomeCallController/WelcomeCallReport'));\r\n    }\r\n    if(r === \"4\"){\r\n      Report = React.lazy(() => import('./components/osController/OSReport'));\r\n    }\r\n    if(r === \"5\"){\r\n      Report = React.lazy(() => import('./components/CSLController/Csl'));\r\n    }\r\n    if(r === \"6\"){\r\n      Report = React.lazy(() => import('./components/SupplierRatingController/SupplierRating'));\r\n    }\r\n\r\n    this.setState({empid: empID,AK: AK,name:name,report:r,glid:glid})\r\n    initGA(empID,AK,r)\r\n  }\r\n\r\n  componentDidMount(){\r\n    PageView('Segmentation')\r\n    this.setState({\r\n      isLoading: false\r\n    })\r\n  }\r\n\r\n  render(){\r\n    if(this.state.isLoading) {\r\n      return <div className=\"d-flex align-items-center justify-content-center\" style={{height: \"45vw\"}}><div className=\"lds-ripple\" >\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n      </div>\r\n    }else\r\n     {\r\n        return <Suspense fallback={<div className=\"d-flex align-items-center justify-content-center\" style={{height: \"45vw\"}}><div className=\"lds-ripple\" >\r\n          <div></div>\r\n          <div></div>\r\n        </div>\r\n        </div>}><Report AK={this.state.AK} employeeid={this.state.empid} employeename={this.state.name} glid={this.state.glid} /></Suspense>\r\n      }\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}